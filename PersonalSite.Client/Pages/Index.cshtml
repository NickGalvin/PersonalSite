@using PersonalSite.Shared
@using PersonalSite.Shared.Auth
@using Microsoft.JSInterop
@using System.Threading
@using System.Timers
@inject HttpClient Http
@inject AppState AppState
@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper uri

@page "/"

<div id="HomeContainer" class="container-fluid">

@if (AppState.Profile != null)
{
    <div>Hi, @AppState.Profile.FirstName!</div>
}
    <div id="Slideshow" class="carousel slide" data-ride="carousel">
        @if (slideshowImages == null)
        {
            <LoadingSpinner />
        }
        else
        {
            <div class="carousel-inner">
                @foreach (var imageUrl in slideshowImages)
                {
                    <div class="carousel-item  @(slideshowImages.IndexOf(imageUrl) == 0 ? "active" : string.Empty)">
                        <img class="d-block w-100" src="@imageUrl" alt="slide">
                    </div>
                }

                <a class="carousel-control-prev" href="#Slideshow" role="button" data-slide="prev">
                    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                    <span class="sr-only">Previous</span>
                </a>
                <a class="carousel-control-next" href="#Slideshow" role="button" data-slide="next">
                    <span class="carousel-control-next-icon" aria-hidden="true"></span>
                    <span class="sr-only">Next</span>
                </a>
            </div>
        }

    </div>
</div>

@functions {

    List<string> slideshowImages;


    protected override async Task OnInitAsync()
    {
        slideshowImages = await Http.GetJsonAsync<List<string>>("/api/file/slideshow");
        System.Console.WriteLine(string.Join(", ", slideshowImages));
        await JSRuntime.Current.InvokeAsync<string>("homeFunctions.initializeSlideshow");
    }




    async Task<string> UploadFile()
    {
        var data = await JSRuntime.Current.InvokeAsync<string>("GetFileData(fileUpload)");
        var response = await Http.PostAsync("/api/upload", new ByteArrayContent(Convert.FromBase64String(data)));
        return await response.Content.ReadAsStringAsync();
    }
}