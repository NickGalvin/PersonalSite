@using PersonalSite.Shared
@using Microsoft.JSInterop;
@page "/RSVP"
@inherits BlazorLayoutComponent
@inject HttpClient Http

<link href="https://fonts.googleapis.com/css?family=Muli|Titillium+Web" rel="stylesheet">
<link href="https://fonts.googleapis.com/css?family=Crimson+Text" rel="stylesheet">
<link href="https://fonts.googleapis.com/css?family=Caveat+Brush|Great+Vibes|Lobster" rel="stylesheet">

<style>


    #RsvpForm {
        width: 50%;
    }

        #RsvpForm > div {
        }

    .remove-person {
    }

    #SubmitRsvp {
    }

    .attendee {
    }

    .remove {
        margin-top: -3em;
    }

    .line {
        border-bottom: 2px solid rgba(0,0,0,.4);
        margin: 1em auto;
    }

    .comment-container {
        margin: 1em 0;
    }

    .error {
        outline: 1px solid red;
    }
</style>
<div id="RsvpPageContainer" class="navy-background">
    @if (rsvp == null)
    {
        //<p><em>Loading...</em></p>
        <LoadingSpinner />
    }
    else
    {
        <h1>RSVP for Nick and Mandy's Wedding Reception</h1>
        <form>
            <div id="RsvpForm" class="container-fluid">
                @foreach (var person in rsvp.Attendees)
                {
                    <div class="attendee card">
                        <div class="attendee-form">
                            <div class="attendee-info name-container form-group row">
                                <label class="col-sm-4 col-xl-2 col-form-label col-form-label-sm name-label" for="@person.Name">Name</label>
                                <div class="col-sm-8 col-xl-10 center column">
                                    <div class="name-message text-danger"></div>
                                    <input class="name form-control " bind="@person.Name" required type="text" />
                                </div>
                            </div>

                            <div class="attendee-info restrictions form-group row">
                                <label class="col-sm-4 col-xl-2 col-form-label col-form-label-sm" for="@person.DietaryRestrictions">Dietary Restrictions</label>
                                <div class="col-sm-8 col-xl-10 center">
                                    <input class="diet-restrictions form-control" bind="@person.DietaryRestrictions" type="text" />
                                </div>
                            </div>

                            <div class="form-group row">
                                <label class="col-sm-4 col-xl-2 col-form-label col-form-label-sm" for="@person.Status">Reception Attendence</label>
                                <div class="col-sm-8 col-xl-10 center column">
                                    <div class="attendance-message text-danger"></div>
                                    <select class="form-control attendance" bind="@person.Status" required>
                                        <option value="" disabled selected>Are you able to attend?</option>
                                        <option value="Accept">I'll Be There</option>
                                        <option value="Decline">Can't Make It</option>
                                    </select>
                                </div>
                            </div>
                        </div>

                        @if (rsvp.Attendees.Count > 1 && rsvp.Attendees.Last() != person)
                        {
                            <div class="line"></div>
                        }

                    </div>
                }

                <div id="button-container form-group">
                    <button id="AddPerson" class="btn btn-secondary" onclick="@AddPerson">Add Person</button>

                    @if (rsvp.Attendees.Count > 1)
                    {
                        <button class="btn btn-secondary" onclick="@RemovePerson">Remove Person</button>
                    }
                </div>

                <div class="form-group comment-container">
                    <label for="Comments">Comments</label>
                    <textarea id="Comments" class="form-control" bind="@rsvp.Comments"></textarea>
                </div>
                <button id="SubmitRsvp" class="btn btn-primary btn-lg" onclick="@SubmitRSVP">Submit RSVP</button>

            </div>

            @if (submittingRsvp)
            {
                @if (!submitComplete)
                {
                    <div class="circle-loader"></div>
                }
                else
                {
                    <div class="circle-loader load-complete">
                        <div class="checkmark draw"></div>
                    </div>
                    <div class="border border-success success-message">RSVP Submitted Successfully!</div>
                }
            }

        </form>
    }
</div>

@functions {
WeddingRSVP rsvp = new WeddingRSVP();
bool submittingRsvp = false;
bool submitComplete = false;

protected override async Task OnInitAsync()
{
    await JSRuntime.Current.InvokeAsync<bool>("rsvpFunctions.hideCircleSpinner");
}

public async void SubmitRSVP()
{

    bool isValid = await JSRuntime.Current.InvokeAsync<bool>("rsvpFunctions.validateRsvp");

    if (isValid)
    {
        // await JSRuntime.Current.InvokeAsync<bool>("rsvpFunctions.showSpinner");
        submittingRsvp = true;

        await Http.PostJsonAsync<WeddingRSVP>("api/RSVP", rsvp);

        submitComplete = true;

        // await JSRuntime.Current.InvokeAsync<bool>("rsvpFunctions.showSuccess");
    }

    // await JSRuntime.Current.InvokeAsync<bool>("rsvpFunctions.hideSpinner");
}

public void AddPerson()
{
    this.rsvp.Attendees.Add(new WeddingAttendee());
}

public void RemovePerson()
{
    var last = rsvp.Attendees.Last();
    this.rsvp.Attendees.Remove(last);
}


}


